#!/bin/bash

# üöÄ Script de Deploy Autom√°tico
# Executa deploy baseado na branch e commit

set -e

BRANCH=$1
COMMIT=$2
DEPLOY_DIR="/opt/rootgames-api"
BACKUP_DIR="/opt/backups/rootgames-api"
LOG_FILE="/var/log/rootgames-deploy.log"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1" | tee -a "$LOG_FILE"
}

# Verificar par√¢metros
if [ -z "$BRANCH" ] || [ -z "$COMMIT" ]; then
    log_error "Uso: $0 <branch> <commit>"
    exit 1
fi

log "üöÄ Iniciando deploy da branch $BRANCH (commit: $COMMIT)"

# Criar diret√≥rios se n√£o existirem
mkdir -p "$BACKUP_DIR"
mkdir -p "$(dirname "$LOG_FILE")"

# 1. Backup do deploy atual
log "üì¶ Criando backup do deploy atual..."
if [ -d "$DEPLOY_DIR" ]; then
    BACKUP_NAME="backup-$(date +'%Y%m%d-%H%M%S')"
    cp -r "$DEPLOY_DIR" "$BACKUP_DIR/$BACKUP_NAME"
    log_success "Backup criado: $BACKUP_NAME"
else
    log_warning "Diret√≥rio de deploy n√£o existe, pulando backup"
fi

# 2. Parar aplica√ß√£o atual
log "‚èπÔ∏è Parando aplica√ß√£o atual..."
if systemctl is-active --quiet rootgames-api; then
    systemctl stop rootgames-api
    log_success "Aplica√ß√£o parada"
else
    log_warning "Aplica√ß√£o n√£o estava rodando"
fi

# 3. Atualizar c√≥digo
log "üì• Atualizando c√≥digo..."
cd "$DEPLOY_DIR" || exit 1

# Fazer pull das mudan√ßas
git fetch origin
git checkout "$BRANCH"
git pull origin "$BRANCH"
git checkout "$COMMIT"

log_success "C√≥digo atualizado para commit $COMMIT"

# 4. Instalar depend√™ncias
log "üì¶ Instalando depend√™ncias..."
yarn install --production --frozen-lockfile
log_success "Depend√™ncias instaladas"

# 5. Executar migra√ß√µes do banco
log "üóÑÔ∏è Executando migra√ß√µes do banco..."
yarn strapi migrate
log_success "Migra√ß√µes executadas"

# 6. Build da aplica√ß√£o
log "üèóÔ∏è Fazendo build da aplica√ß√£o..."
yarn build
log_success "Build conclu√≠do"

# 7. Executar testes
log "üß™ Executando testes..."
if yarn test:ci; then
    log_success "Testes passaram"
else
    log_error "Testes falharam, revertendo deploy"
    # Reverter para backup
    if [ -d "$BACKUP_DIR/$BACKUP_NAME" ]; then
        rm -rf "$DEPLOY_DIR"
        mv "$BACKUP_DIR/$BACKUP_NAME" "$DEPLOY_DIR"
        systemctl start rootgames-api
    fi
    exit 1
fi

# 8. Iniciar aplica√ß√£o
log "üöÄ Iniciando aplica√ß√£o..."
systemctl start rootgames-api

# Aguardar aplica√ß√£o ficar pronta
sleep 10

# Verificar se aplica√ß√£o est√° rodando
if systemctl is-active --quiet rootgames-api; then
    log_success "Aplica√ß√£o iniciada com sucesso"
else
    log_error "Falha ao iniciar aplica√ß√£o"
    exit 1
fi

# 9. Health check
log "üîç Executando health check..."
if curl -f http://localhost:1337/api/health > /dev/null 2>&1; then
    log_success "Health check passou"
else
    log_error "Health check falhou"
    exit 1
fi

# 10. Limpeza de backups antigos (manter apenas √∫ltimos 5)
log "üßπ Limpando backups antigos..."
cd "$BACKUP_DIR"
ls -t | tail -n +6 | xargs -r rm -rf
log_success "Backups antigos removidos"

# 11. Notificar sucesso
log_success "üéâ Deploy conclu√≠do com sucesso!"
log "üìä Branch: $BRANCH"
log "üìù Commit: $COMMIT"
log "‚è∞ Timestamp: $(date)"

# Enviar notifica√ß√£o (opcional)
if command -v curl > /dev/null; then
    curl -X POST "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" \
        -H 'Content-type: application/json' \
        --data "{\"text\":\"üöÄ RootGames API deployado com sucesso!\nBranch: $BRANCH\nCommit: $COMMIT\"}" \
        > /dev/null 2>&1 || true
fi

exit 0
